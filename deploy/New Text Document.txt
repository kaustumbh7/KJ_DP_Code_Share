from django.apps import AppConfig
from fastai.text import *
import html
import pathlib

class WebappConfig(AppConfig):
    name = 'webapp'
    PATH = Path('required_files')
    tok_trn = np.load(PATH/'tok_trn.npy')
    tok_val = np.load(PATH/'tok_val.npy')

    trn_clas = np.load(PATH/'trn_ids.npy')
    val_clas = np.load(PATH/'val_ids.npy')

    trn_labels = np.squeeze(np.load(PATH/'trn_labels.npy'))
    val_labels = np.squeeze(np.load(PATH/'val_labels.npy'))

    itos = pickle.load(open(PATH/'itos.pkl', 'rb'))

    stoi = collections.defaultdict(lambda:0, {v:k for k,v in enumerate(itos)})

    bptt,em_sz,nh,nl = 70,400,1150,3
    vs = len(itos)
    opt_fn = partial(optim.Adam, betas=(0.8, 0.99))
    bs = 48


    min_lbl = trn_labels.min()
    trn_labels -= min_lbl
    val_labels -= min_lbl
    c=int(trn_labels.max())+1

    trn_ds = TextDataset(trn_clas, trn_labels)
    val_ds = TextDataset(val_clas, val_labels)
    trn_samp = SortishSampler(trn_clas, key=lambda x: len(trn_clas[x]), bs=bs//2)
    val_samp = SortSampler(val_clas, key=lambda x: len(val_clas[x]))
    trn_dl = DataLoader(trn_ds, bs//2, transpose=True, num_workers=1, pad_idx=1, sampler=trn_samp)
    val_dl = DataLoader(val_ds, bs, transpose=True, num_workers=1, pad_idx=1, sampler=val_samp)
    md = ModelData(PATH, trn_dl, val_dl)

    dps = np.array([0.4,0.5,0.05,0.3,0.4])*0.5

    m = get_rnn_classifer(bptt, 20*70, c, vs, emb_sz=em_sz, n_hid=nh, n_layers=nl, pad_token=1,
            layers=[em_sz*3, 50, c], drops=[dps[4], 0.1],
            dropouti=dps[0], wdrop=dps[1], dropoute=dps[2], dropouth=dps[3])

    opt_fn = partial(optim.Adam, betas=(0.7, 0.99))

    learn = RNN_Learner(md, TextModel(to_gpu(m)), opt_fn=opt_fn)
    learn.reg_fn = partial(seq2seq_reg, alpha=2, beta=1)
    learn.clip=.25
    learn.metrics = [accuracy]

    # single prediction on last classifier
    learn.load('required_files/clas_fwd')
    mod = learn.model
    #set batch size to 1
    mod[0].bs=1
    #turn off dropout
    mod.eval()
    #reset hidden state
    mod.reset()  

